Scope: 
A program that accepts a any string of text entered by the user. The outputis a list of each character in the text and its Huffman code.  
No library functions are used for obtaining the codes. The Greedy Method is used.

Background:
Huffman encoding is an algorithm used for a lossless data compression by assigning binary codes to represent characters calculated based on their frequency in given input. 
To implement Huffmann encoding in C++ a heap data structure can be used. 
For example, min-heap or priority queue can be utilized to recursively merge two characters starting from the least frequencies until all characters are merged and form a complete tree. 
The greedy method can be achieved by starting the merge from the least frequent characters and merging them, so that the most frequent character is the closest to the root using heapify. 

Introduction:
The program below implements the Huffman encoding in a simple way, without using any library function to get codes. 
This program consists of only a few classes Node, Tree, and huffmannMethod, that are designed to compress a given input string by assigning binary codes to each character, 
based on their frequency in the input string and give code values for each character as the output. The accuracy is tested using a decode method.

Methodology:
	To achieve the objective of this assignment following steps were done: 
1.	Calculate the frequency of each character.
2.	Sort the characters by frequency.
3.	Build a tree based of characters frequency.
4.	Traverse the tree and assign the Huffman codes 
5.	Check with decode method for accuracy.

Step by step explanation:
In this program only two libraries are used <iostream> library for input/output, to be able to interact with the user and <string> library, to be able to operate on string data type. 
This makes the program less efficient than if other libraries like <queue> or <unordered_map> were also included. 
Nevertheless, the program achieves its’ scope, and no library is used to get the code values.
#include <iostream> // Include input/output stream library
#include <string> // Include string library

using namespace std; // not a good practice but a little less typing

The program accepts 128 ASCII range characters, because this we are working with a standard US keyboard. In this case using extended ASCII to accommodate 256 characters would be wasteful. 
Adding UNICODE to type symbols and such was not in scope. 
Extra credit task was not achieved, the program will not assign special codes to “nt” and “th”.
The program consists of a single .cpp file with class, and method definition and an entry point int main() {} on line 204 in the same file. 
There are no additional files like header files. A standard namespace is used to save some typing. Those solutions are not a good practice for a professional project, 
but this program is small, and no naming conflicts should occur. 

An array of size 128, (number of characters in the ASCII range) is used to store the frequency count of each character.  
It is of type constant integer because once initialized this value of characters should not be changed. There should not be any number other than integer used here.
const int basicASCIIrange = 128; // Maximum number of characters (ASCII range)

The first class is Node. This class will allow to create an object of Node data structure with properties defined in this class. 
Each instance of class Node, an object, will have following private data members (or instance variables) a character value, its frequency in the input string, 
two pointers to its left and right child nodes. 
In public members the Node class has a parameterized constructor Node(char c, int f) : character(c), frequency(f), leftChild(nullptr), rightChild(nullptr) {} . 
It takes two parameters, c of type char for the character in the input and f of type int for the frequency of that character and initializes the member variables character 
and frequency with the values of the corresponding parameters and sets the leftChild and rightChild pointers to nullptr. For optimization, the constructor uses a member initialization list 
to initialize the member variables, rather than assigning values to the member variables in the constructor body, is the same as:
    Node(char c, int f) {
    character = c;
    frequency = f;
    leftChild = nullptr;
    rightChild = nullptr; }
All other functions in the Node class are accessor (get) and mutator (set) functions that are used to access the private data member variables of this (current) Node object.
Those Node objects will serve as a base to build the binary tree. 

// Node class representing a node in a tree
class Node {
private:
    char character; // Character value of the node
    int frequency; // Frequency of the character
    Node* leftChild; // Left child of the node
    Node* rightChild; // Right child of the node

public:
    // Node constructor
    // Initializes a new Node object with the specified character and frequency
    Node(char c, int f) : character(c), frequency(f), leftChild(nullptr), rightChild(nullptr) {}


    // Get the character value of this Node
    //returns the character value of the node
    char getCharacter() const { return character; }

    // Sets the character value of this Node to the specified value c
    void setCharacter(char c) { character = c; }

    // Get the frequency count of this Node
    //returns the frequency count of the node
    int getFrequency() const { return frequency; }

    // Set the frequency count of this Node to the specified value f
    void setFrequency(int f) { frequency = f; }

    // Get the left child Node of this Node
    //returns a pointer to the left child node of the current node
    Node* getLeftChild() const { return leftChild; }

    // Set the left child Node of this Node to the specified node pointer "left"
    void setLeftChild(Node* left) { leftChild = left; }

    // Get the right child Node of this Node
    //returns a pointer to the right child node of the current node
    Node* getRightChild() const { return rightChild; }

    // Set the right child Node of this Node to the specified node pointer "right"
    void setRightChild(Node* right) { rightChild = right; }


The next class is Tree. This will serve as a blueprint to build a tree. 
In this class private data member Node* root represent the root node of the tree and an array of strings huffCodesStorageCharArray to store Huffman binary values of 
the codes for each character. To initialize a new Tree object with the specified character frequencies a one-parameter constructor is defined that takes 
an array of integers that represent the frequencies of characters as parameter. 
Public members of class Tree are accessor and mutator to get and set the root node in the tree. 
A void function assignHuffCodes (const Node* node, const string& code), where node parameter represents the current node being processed and 
the code parameter represents the Huffman code for the current node. This function assigns the codes to each character in the tree. 
A function const string* getCodes() to retrieve the codes for each character in a form of an array. 
And function Node* buildTreeMethod(Node** nodes, int counterOfNodes), in which nodes parameter is a pointer to the first element of an array of node pointers,
and counterOfNodes represents the number of nodes in the array. This function is to build the tree from an array of nodes. 
// Tree class representing the Huffmann tree
class Tree {
private:
    Node* root; // Root node of the Huffmann tree
    string huffCodesStorageCharArray[basicASCIIrange]; // Array to store Huffmann codes for each character

public:
    // Tree class constructor
    // Initializes a new Tree object with the specified character frequencies
    Tree(const int* frequencies);

    // Get the root Node of the Huffmann tree
    Node* getRoot() const { return root; }

    // Set the root Node of the Huffmann tree
    void setRoot(Node* r) { root = r; }

    // Assign Huffmann codes to each character in the Huffmann tree
    void assignHuffCodes(const Node* node, const string& code);

    // Get the array of Huffmann codes for each character in the Huffmann tree
    const string* getCodes() const { return huffCodesStorageCharArray; }

    // Build the Huffmann tree from an array of Nodes
    //Node** nodes parameter is a pointer to a pointer to a Node object
    //used to pass an array of Node pointers into the buildTreeMethod method
    //nodes is a pointer to the first element of an array of Node pointers
    Node* buildTreeMethod(Node** nodes, int counterOfNodes);
};

Here the constructor for class Tree is implemented. The constructor takes an array of integers. 
Each element of the array represents the frequency of a character in the input string. For loop iterates throuth the array. 
Whenever a frequency of a character is greater than 0, a new node is created for that character. 
The nodes are stored in variable nodes which is an array of pointers. Once the iterations are done, the constructor will call the buildTreeMethod. 
Which is a method used to build a tree data structure from the array of nodes, as result, the root node of the tree is assigned to the root member variable. 
Then the method assignHuffCodes is called, this methos assigns code values to each character of the input string. 
//Tree constructor
Tree::Tree(const int* frequencies) {
    Node* nodes[basicASCIIrange] = { 0 }; // Array of Node pointers
    int counterOfNodes = 0; // Number of nodes in the array
    for (int i = 0; i < basicASCIIrange; i++) {
        if (frequencies[i] > 0) {
          // Create a new node for each character with a frequency greater than 0
          //new operator to dynamically allocate memory on the heap for new Node
            nodes[i] = new Node(i, frequencies[i]); 
            counterOfNodes++; // Increment the node count
        }
    }
    root = buildTreeMethod(nodes, counterOfNodes); // Build the Huffmann tree
    assignHuffCodes(root, ""); // Assign Huffmann codes to characters in the tree
}


The last class is huffmannMethod that will provide an interface for both encoding and decoding characters of the input string. 
This class has private member variable tree of type Tree, and a private method int* countCharFreqOfInputString(const string& inputString) that takes 
a const string& parameter called inputString and returns a pointer to an array of integers where the frequency of the character at index i is stored at index i in the array.
The constructor that will take reference to inputString as parameter is defined as well. As public members there are three methods in the huffmannMethod class. 
Encode method that takes an input of type string passed by reference and returns the Huffman encoding of that string, and a decode method that takes an encoded string also 
passed by reference and returns the original input. The constructor implementation huffmannMethod::huffmannMethod(const string& inputString) initializes 
the tree object by calling a private method countCharFreqOfInputString which counts the frequency of each character in the inputString and passes the resulting array to the Tree constructor.
// huffmannMethod class that will do the coding and decoding of inputString using the tree
class huffmannMethod {
private:
    Tree tree; // Tree type object
    int* countCharFreqOfInputString(const string& inputString); // Method to count character frequencies in the input inputString

public:
  //Parameter string passed by reference instead of value
  //No need to copy the string, saves memory, improves performance
    huffmannMethod(const string& inputString); // huffmannMethod constructor
    string encode(const string& inputString); // Method to encode inputString
    string decode(const string& encodedInputString); // Method to decode encoded inputString
};

// huffmannMethod constructor
//initializes the Huffmann tree using the character frequencies from the inputString 
//and passes the resulting array to the Tree constructor
huffmannMethod::huffmannMethod(const string& inputString) : tree(countCharFreqOfInputString(inputString)) {}

To count the frequency of each character in the string method countCharFreqOfInputString is used. 
It takes an input string passed by reference as an argument and initializes an array called frequencies (initialized to all zeros at the beginning) to store 
the frequency count of each character in the ASCII range. Then, the method iterates over each character in the input string using for loop
and increments the frequency of the current character in the frequencies array. Finally, it returns the frequencies array.
// Methods
// Method to count character frequencies in the input inputString
int* huffmannMethod::countCharFreqOfInputString(const string& inputString) {
    static int frequencies[basicASCIIrange] = { 0 }; // Initialize an array to store character frequencies
    for (char currentCharacter : inputString) { // Iterate over each character in the inputString
        frequencies[currentCharacter]++; // Increment the frequency of the current character
    }
    return frequencies; // Return the array of character frequencies
}

To build the tree for the Huffman implementation buildTreeMethod is used. Node* Tree::buildTreeMethod(Node** nodes, int counterOfNodes) in this method 
an array of Node pointers (nodes) and the number of nodes (counterOfNodes) are passed as input parameters. Using while loop that runs until only one noode – the root of the tree is left. 
Two integer variables are initialized to store values of index numbers of two nodes with the smallest frequencies, minimumFreqNode1 and minimumFreqNode2. 
Then for loop iterates the array of nodes to find those two nodes with the smallest frequencies. First if statements checks if the the current node exists (nodes[i]). 
The inner if statement checks if minimumFreqNode1 is not set or the current node's frequency is smaller than the minimumFreqNode1 node's frequency. 
If it’s smaller then assign the new smallest frequency to  minimumFreqNode1 and move the old value of minimumFreqNode1 to minimumFreqNode2. 
Else if statement checks if minimumFreqNode2 is not set or the current node's frequency is smaller than the minimumFreqNode2 node's frequency, 
if that is true then value of index in minimumFreqNode2 will be updated. Once two nodes with the smallest frequeny are found exit for loop 
and combine them into a parent node. In this process a new Node is created, where the character value is set to 0 (indicating it's not a leaf node), 
the frequency is set to the sum of the frequencies of the two smallest nodes (nodes[minimumFreqNode1]->getFrequency() + nodes[minimumFreqNode2]->getFrequency()). 
The parentNode has its left and right children set to the two smallest nodes (minimumFreqNode1 and minimumFreqNode2). The nodes array is updated. 
The node at index minimumFreqNode1 is replaced with the parentNode, and the node at index minimumFreqNode2 is set to nullptr which removes it from the array. 
Then the node count (counterOfNodes) is decremented by 1 each itereation. The method goes back to while loop and repeats until one node remains in the array. 
(This will be the root for the tree.) For loop is used again to iterate the array nodes from index 0 to basicASCIIrange – 1 (was set as constant 128 to represent 
possible characters at the beginning of the program), to find and return the index of the last node, the root, and return it. 
If statement checks if nodes[i] is not nullptr using the condition if (nodes[i]). This means that a node exists at the current index i. 
If a non-null node is found at the current index i, it is returned immediately with return nodes[i]. 
This must be the root node of the tree because all other nodes by this point should either be combined or set to nullptr. 
In case the loop fails finding the root node a return nullptr statement is added at the end of the method.
// Method to build the Huffmann tree
Node* Tree::buildTreeMethod(Node** nodes, int counterOfNodes) {
    while (counterOfNodes > 1) { // Continue until only one node is left (the root node)
        int minimumFreqNode1 = -1, minimumFreqNode2 = -1; // Initialize the indices of the two nodes with the smallest frequencies

        // Iterate over the array of nodes to find the two nodes with the smallest frequencies
        for (int i = 0; i < basicASCIIrange; i++) {
            if (nodes[i]) { // Check if the node exists
                // If minimumFreqNode1 is not set or the current node's frequency is smaller than the minimumFreqNode1 node's frequency
                if (minimumFreqNode1 == -1 || nodes[i]->getFrequency() < nodes[minimumFreqNode1]->getFrequency()) {
                    minimumFreqNode2 = minimumFreqNode1; // Move the minimumFreqNode1 index to minimumFreqNode2
                    minimumFreqNode1 = i; // Set the new minimumFreqNode1 index to the current index
                }
                // If minimumFreqNode2 is not set or the current node's frequency is smaller than the minimumFreqNode2 node's frequency
                else if (minimumFreqNode2 == -1 || nodes[i]->getFrequency() < nodes[minimumFreqNode2]->getFrequency()) {
                    minimumFreqNode2 = i; // Set the new minimumFreqNode2 index to the current index
                }
            }
        }

        // Create a new combined node, a parent, with the sum of the frequencies of the two smallest nodes
        Node* parentNode = new Node(0, nodes[minimumFreqNode1]->getFrequency() + nodes[minimumFreqNode2]->getFrequency());
        parentNode->setLeftChild(nodes[minimumFreqNode1]); // Set the left child to the minimumFreqNode1 node
        parentNode->setRightChild(nodes[minimumFreqNode2]); // Set the right child to the minimumFreqNode2 node

        nodes[minimumFreqNode1] = parentNode; // Replace the minimumFreqNode1 node with the combined node in the array
        nodes[minimumFreqNode2] = nullptr; // Remove the minimumFreqNode2 node from the array

        counterOfNodes--; // -- node count
    }

    // Return the last remaining node (the root node of the Huffmann tree)
    for (int i = 0; i < basicASCIIrange; i++) {
        if (nodes[i]) {
            return nodes[i];
        }
    }

    return nullptr; // Return nullptr if no nodes are found (should not happen)
}

To compute the values of code for each character assignHuffCodes method is used. It is a void type method with two parameters, const Node* node which is a pointer to a constant Node object representing the current node being processed in the tree. This parameter is to check if the node contains a character and to access the left and right child nodes when traversing the tree. The second parameter const string& huffCodeValue is a constant reference to a string representing the current code value. This value will update while the method traverses the tree, every time a leaf node is reached this value will be assigned to a character. 
The assignHuffCodes method first has to check if the current node (node) contains a character using node->getCharacter(). If the node contains a character, it means that the method has reached a leaf node and it will associate the current code value (huffCodeValue) with that character. The huffCodesStorageCharArray is an array used to store the Huffmann codes for each character, where the indices correspond to the ASCII values of the characters, making it easily accessible. 
When the method encounters a leaf node (a node with a character), it stores the current Huffman code value in the huffCodesStorageCharArray at the index corresponding to the character's ASCII value huffCodesStorageCharArray[node->getCharacter()] = huffCodeValue; 
 If there is no character in the node, meaning that is not a leaf node, the method will proceed to traverse both left and right subtrees. For subtree traversal, the assignHuffCodes method is called recursively. To traverse the left child node->getLeftChild(), and “0” will be append to the current value of Hufmann (because left side of the tree corresponds to 0 bit in Huffmann algorithm).  To traverse the right side the method uses node->getRightChild() and appends “1” to the the current Huffman code value (because right side of the tree corresponds to 1 bit in Huffmann algorithm).  

// Method to compute Huffmann code values to each character in the tree
void Tree::assignHuffCodes(const Node* node, const string& huffCodeValue) {
    if (node->getCharacter()) { // If the node contains a character
        huffCodesStorageCharArray[node->getCharacter()] = huffCodeValue; // Assign the current code to the character
    }
    else { // If the node is not a leaf node (does not contain a character)
        assignHuffCodes(node->getLeftChild(), huffCodeValue + "0"); // Traverse the left subtree with code + "0"
        assignHuffCodes(node->getRightChild(), huffCodeValue + "1"); // Traverse the right subtree with code + "1"
    }
}




To encode or compress the input string encode(const string& inputString) method is used. It takes one parameter, constant reference to a string, which represents the input text to be encoded. It is achieved by retrieving the Huffmann codes for each character by calling tree.getCodes(), from this a pointer will be returned to the array of Huffman codes (huffmannCodes) from the Tree class. An empty string encodedString, which will store the encoded text is initialized. Then a for loop will iterate over each character in the input (inputString). For each character of the input text, the method will find its corresponding Huffman code by accessing the huffmannCodes array at the index of the character's ASCII value. Then it will append the Huffmann code to the encodedString. Each character and the corresponding code value are printed to the console.  After all iterations through the input text are done, return the encodedString, which now contains the Huffman-encoded text. 
// Method to encode input text using the Huffman tree
string huffmannMethod::encode(const string& inputString) {
    const string* huffmannCodes = tree.getCodes(); // Retrieve Huffman codes for each character

    string encodedString; // Initialize the encoded text string
    for (char character : inputString) { // Iterate over each character in the input text
        encodedString += huffmannCodes[character]; // Append the Huffman code for the current character to the encoded text
        cout << "Character: " << character << ", Huffmann code: " << huffmannCodes[character] << endl; // Print the character and its Huffman code
    }
    return encodedString; // Return the encoded text
}


	The last method is to decode the encoded string. This is out of the project’s scope, just to test if everything works. It takes a one parameter, encodedInputString, which represents the text to be decoded. An empty strig is initialized decodedInputString, which will store the decoded text. The method will start decoding at the root of the tree by calling tree.getRoot() and storing it in the currentNode variable. Then using a for loop, it will iterate through each character of the encoded input string (encodedInputString). Based on the character's value, if the character is '0', move to the left child of the currentNode, if the character is '1', move to the right child of the currentNode. After each move, check if the currentNode contains a character, it does, means it is a leaf node, append the character to the decodedInputString. Reset the currentNode back to the root of the Huffman tree. Repeat for all characters and return a decoded string. 
// Method to decode encoded inputString using the Huffmann tree
string huffmannMethod::decode(const string& encodedInputString) {
    string decodedInputString; // Initialize the decoded inputString string
    const Node* currentNode = tree.getRoot(); // Start at the root of the Huffmann tree

    for (char c : encodedInputString) { // Iterate over each character in the encoded inputString
        if (c == '0') {
            currentNode = currentNode->getLeftChild(); // Move to the left child if the current character is '0'
        }
        else {
            currentNode = currentNode->getRightChild(); // Move to the right child if the current character is '1'
        }

        if (currentNode->getCharacter()) { // If the current node has a character
            decodedInputString += currentNode->getCharacter(); // Append the character to the decoded inputString
            currentNode = tree.getRoot(); // Reset the current node back to the root
        }
    }

    return decodedInputString; // Return the decoded inputString
}



The last part of the program is the main() function, the entry point for the program. First and empty string inputString is initialized to store the user's input. Then a message is print asking the user to enter a string of text (limited to the 128 ASCII range) and getline(cin, inputString) is used to read the user's input and store it in the inputString variable.
Next an object of class huffmannMethod called hmObject is creaed by passing the inputString as an argument. This will initialize the object and constructs the Huffman tree. 
The encode() method on the hmObject is called by passing the inputString as an argument. This method returns the encoded/ compressed version of the input string, which is then stored in the encodedInputString variable. The results are printed to the console. 
Then the decode() method is called on the hmObject by passing the encodedInputString as an argument. This method returns the original, uncompressed version of the encoded input string, which is then stored in the decodedInputString variable. The result is also printed to the console.
    Return 0 to indicate successful execution of the program.
// Main function
int main() {
    string inputString; // Initialize a string to store the input inputString
    cout << "Please enter a string (128 ASCII range): "; // Prompt the user to enter a string of inputString
    getline(cin, inputString); // Read the input inputString

    huffmannMethod hmObject(inputString); // Initialize a huffmannMethod object with the input inputString

    string encodedInputString = hmObject.encode(inputString); // Encode the input inputString
    cout << "Complete Huffmann code: " << encodedInputString << endl; // Print the encoded inputString

    string decodedInputString = hmObject.decode(encodedInputString); // Decode the encoded inputString
    cout << "Decoded text: " << decodedInputString << endl; // Print the decoded inputString

    return 0; // Return 0 to indicate successful execution
}

Conclusions:
	The program does the tasks of the project scope using very few methods and minimal numbers of libraries. It calculates the frequency of each character of the input text. Sorts the characters by frequency. Builds a tree based of characters frequency using greedy method min-heap, that will assign values of the highest frequency towards the top of the tree and lowest frequencies will go towards the bottom. It can traverse the tree and assign the Huffmann codes to perform the compression and check with decode method for accuracy. Only the extra credit task was not achieved.
	The code could be optimized and made written with shorter variable names, but it is kept as simple as reasonably possible without compromising data structures, for example by resorting to struct data type that is using public members only instead of using class. Keeping it simple will also make it easier to submit.


